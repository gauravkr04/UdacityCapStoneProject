# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0
  

jobs:
  lint:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv ~/.capstone
            source ~/.capstone/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            
      - run:
          name: run lint
          command: |
            source ~/.capstone/bin/activate
            make lint
  
  create-docker-image:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Build and Upload docker image
          command: |
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PWD}
            docker build -t gauravkr04/udacitycapstone:1.0 .
            docker container ls

            docker push gauravkr04/udacitycapstone:1.0
            
  create-project-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''
          
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
       #   get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/udacitycapstone
          
  test-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string

    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: $AWS_DEFAULT_REGION         
      - run:
            name: Verify Cluster and Test Application
            command: |
              kubectl get svc
              kubectl get nodes
              kubectl get deployment
              kubectl get pods

workflows:
  deployment:
    jobs:
      #- lint
      #- create-docker-image
      #    requires:
      #      - lint
      #- create-project-cluster:
      #    cluster-name: udacity-capstone
      #    requires:
      #      - create-docker-image
      - create-deployment:
          cluster-name: udacity-capstone
      #    requires:
      #      - create-project-cluster    
      - test-deployment:
          cluster-name: udacity-capstone
      #    requires:
      #      - create-deployment     
      #- aws-eks/update-container-image:
      #    cluster-name: udacity-capstone
      #    container-image-updates: 'udacitycapstone=gauravkr04/udacitycapstone:latest'
      ##    get-rollout-status: true
      #    record: true
      ##    resource-name:  deployment/udacitycapstone
      #    requires:
      #       - test-deployment

